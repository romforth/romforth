#!/usr/bin/perl -w

# genprims : convert code.prims into pdp11-aout-as friendly assembly code
#
# Copyright (c) 2022 Charles Suresh <romforth@proton.me>
# SPDX-License-Identifier: AGPL-3.0-only
# Please see the LICENSE file for the Affero GPL 3.0 license details

use strict;

my $mf=shift;	# the map file to be generated

open(my $mh, ">$mf") or die "can't open $mf for writing";

my ($f,$l);	# the forth name($f) and the assembler label ($l)

sub mapnames {
	($f,$l)=@_;		# which provides forth<->label mapping
	print $mh "code $f $l\n";	# create dictionary entry for primitives
	print "$l:\n";	# generate the label for the assembler
}

my $hash={};
my $agg=[];
my $label="lbl000";
while (<>) {
	if (s/^\s*(\S+)\s+:\s+//) {
		$f=$1;
		if ($f=~/^\w+$/) {
			mapnames($f, $f);
		} else {
			mapnames($f, $label++);
		}
		for my $w (split(' ;')) {
			chomp $w;
			$w="next" unless ($w);
			$w=~s/^\s+//;
			if ($l=$hash->{$w}) {
				print "\t", join("\n\t",@$l), "\n";
				push @$agg, @$l unless ($w eq "next");
			} else {
				print "\t$w\n";
				push @$agg, $w;
			}
		}
		$hash->{"$f"}=[@$agg];
		$agg=[];
		next;
	}
	if (/^define\s+(\S+)\s+(.*)$/) {	# definitions
		print "#define $1 $2\n";
		next;
	}
	next if (/^\s*$/);
	chomp;
	die "unknown declaration: '$_'";

=head cut

	if (/^code\{$/) {		# code{ : start of primitive declaration
		mapnames();		# handle forth word to label mapping
	} elsif (/^\}code$/) {		# }code :end of primitive declaration:
		print "# end of definition of $l -> $f\n";
	} elsif (/^inner\{$/) {		# inner{ : primitives that loop to inner
		mapnames();		# handle forth word to label mapping
	} elsif (/^\}inner$/) {		# }inner : end of word looping to inner
		print "next	# continue within the interpreter\n";
	} elsif (/^unary\s+(\S+)\s+(\S+)\s+(.*)$/) {	# unary operators
		($f,$l)=($1,$2);
		print $mh "code $f $l\n"; # create dictionary entry for unary
		print "$l:\n";		# generate the label for the assembler
		print "\t$3\n";
		print "\tnext\n";
	} elsif (/^binary\s+(\S+)\s+(\S+)\s+(.*)$/) {	# binary operators
		($f,$l)=($1,$2);
		print $mh "code $f $l\n"; # create dictionary entry for binary
		print "$l:\n";		# generate the label for the assembler
		print "\t_nip\n";
		print "\t$3\n";
		print "\tnext\n";
	} elsif (/^fallthru\s+(\S+)\s+(\S+)\s+(.*)$/) {	# "fall thru" operators
		($f,$l)=($1,$2);
		print $mh "code $f $l\n"; # create dictionary entry for fallthru
		print "$l:\n";		# generate the label for the assembler
		print "\t$3\n";
	} elsif (/^define\s+(\S+)\s+(.*)$/) {	# definitions
		print "#define $1 $2\n";
	} elsif (/^var\s+(\S+)\s+(\S+)\s+(.*)$/) {	# variables
		($f,$l)=($1,$2);
		print $mh "var $f $l\n";# create dictionary entry for variables
		print "$l:\n";		# generate the label for the assembler
		print "\t$3\n";		# and allocation/initial value if any
	} else {
		print;	# assembler code between code{...}code is passed thru
	}
=cut

}

close $mh;
