# code.prims : mapping from the Forth primitives to native code (x86 assembly)
#
# Copyright (c) 2022 Charles Suresh <romforth@proton.me>
# SPDX-License-Identifier: AGPL-3.0-only
# Please see the LICENSE file for the Affero GPL 3.0 license details

code{
bye halt
	hlt
}code

define tos %bx
define nos %cx
define   w %ax
define  ip %si
define  rp %di

define next jmp *%bp

define _nip pop nos
define _dip push nos
define _dup push tos
define _drop pop tos
define _inc inc tos
define _dec dec tos
define _neg neg tos
define _inv not tos
define _xchg xchg tos, nos
define _fetch mov (tos), tos

code{
p@ peek			# [ port	(port:byte) // ready to read
	mov tos, %dx	# [ port	// dx is used for in/out
	in %dx, %al	# [ port	// al = peek(port)
	mov %al, %bl	# [ XX|byte	// copy from al to bl
	xor %bh, %bh	# [ byte	// zero the high byte
	jmp restoredx	#		to restore dx (and ah)
}code

code{
p! poke			# [ byte port	// ready to write
	_nip		# [ port	// nos=byte
	mov tos, %dx	# [ port	// dx is used for in/out
	mov nos, w	# [ port	// al is used for in/out
	out %al, %dx	# [ port	// poke(port, al)
	_drop		# [
	jmp restoredx	#		to restore dx (and ah)
}code

code{
call call		# [ x	| w	| ip	]
	mov tos, w	# [ x	| x	| ip	]
	_drop		# [	| x	| ip	]
	jmp save
}code

code{
enter enter		# [ x	| w	| ip	 ] (ip:v)
	lodsw		# [ x	| v	| ip+2	 ]
save:
	xchg w, ip	# [ x	| ip+2	| v	 ]
	stosw		# [ x	| ip+2	| v ip+2 ]
	jmp restoreax	# jmp inner, but restore ax first
}code

inner{
exit exit		# [ x	| w	| ip ret ]
	dec rp		# rp--
	dec rp		# rp--
	mov (rp), ip	# [ x	| w	|    ret ]
}inner

code{
rot rot			# [ a b c
	_nip		# [ a c		// nos=b
	pop w		# [ c		// w=a
	_dip		# [ b c
	_dup		# [ b c c
	mov w, tos	# [ b c a
	jmp restoreax	# jmp inner, but restore ax first
}code

code{
jmp branch		# [	| w	| ip	] (ip:v)
	lodsb           # [	| v	| ip+1	] // al=*si++
	cbw		# [	| V	| ip+1	] // sign extend al into ah
	add w, ip	# [	| V	| ip+1+V] // si += ax
	jmp restoreax	# jmp inner, but restore ax first
}code

inner{
jz branchz		# [ x	| w	| ip	]
	neg tos		# [ -x	| w	| ip	] // if tos!=0, set carry
	_drop		# [	| w	| ip	]
	jnc branch	# [	| w	| ip	] // if tos==0, goto branch
	inc ip		# [	| w	| ip+1	] // otherwise skip over offset
}inner

inner{
jnz branchnz		# [ x	| w	| ip	]
	neg tos		# [ x	| w	| ip	] // if tos!=0, set carry
	_drop		# [	| w	| ip	]
	jc branch	# [	| w	| ip	] // if tos!=0, goto branch
	inc ip		# [	| w	| ip+1	] // otherwise skip over offset
}inner

inner{
key key
	_dup		# save tos
	in %dx, %al	# read from serial port
	xor tos, tos	# just need to clear TOS.h
	mov %al, %bl	# save byte read in TOS.l
}inner

inner{
emit emit
	mov %bl, %al	# restore stashed value
	out %al, %dx	# and echo it out to the serial port
	_drop		# drop displayed value in TOS
}inner

code{
exec exec		# [ x	| w |	]
	mov %bl, %al	# [ x	| x |	]
	_drop		# [	| x |	]
	jmp *w		# exec the code corresponding to that offset
}code

inner{
lit lit			# [ x	| w | ip ] (ip:v)
	_dup		# [ x x	| w | ip ]
	mov w, tos	# [ x w | w | ip ]	// just to preserve AH
	lodsw		# [ x w | v | ip+2 ]
	xchg w, tos	# [ x v | w | ip+2 ]	// to restore AH and set tos
}inner

unary rp@! rpxchg xchg tos, rp
unary sp@! spxchg xchg tos, %sp

fallthru 2drop drop2 _drop	# drop	# and then fall thru to drop
unary drop drop _drop
unary dup  dup  _dup
unary nip  nip  _nip

code{
pick pick			# [ n
	add tos, tos		# [ n*2		// tos *= cell; actually
	add %sp, tos		# [ sp+n*2	// tos += sp; and then fall thru
}code
				# [ addr	(addr:val)
unary @    fetch _fetch		# [ val

inner{
! store				# [ val addr
	pop (tos)		# [ addr	(addr:val)
	_drop			# [
}inner

inner{
c@ cfetch			# [ addr	(addr:byte)
	mov (tos), %bl		# [ XX|byte	// fetch to lower half of TOS
	xor %bh, %bh		# [ byte	// clear top half of TOS
}inner

inner{
c! cstore			# [ byte addr
	_nip			# [ addr	// nos=byte
	mov %cl, (tos)		# [ addr	(addr:byte)
	_drop			# [
}inner

				# [ a b
fallthru swap swap _nip		# [ b	// nos=a and fall thru to xchg
fallthru xchg xchg _xchg	# [ a	// nos=b and fall thru to dip
unary dip  dip  _dip		# [ b a

unary inc  inc  _inc
unary dec  dec  _dec
unary neg  neg  _neg
unary inv  inv  _inv

fallthru - sub _neg	# tos = -tos # and then fall thru to addition
binary + add add nos, tos
binary & and and nos, tos
binary |  or  or nos, tos
binary ^ xor xor nos, tos

inner{
<< shl			# [ n s
	mov %bl, %cl	# [ n s	// cl <- s.l
	_drop		# [ n
	shl %cl, tos	# [ n<<cl
}inner

inner{
>> shr			# [ n s
	mov %bl, %cl	# [ n s	// cl <- s.l
	_drop		# [ n
	shr %cl, tos	# [ n>>cl
}inner

inner{
>r tor			# [ x	|   ]
	mov tos, (rp)	# [ x	| x ]
	_drop		# [	| x ]
	inc rp		# rp++
	inc rp		# rp++
}inner

inner{
r> fromr		# [ a	| x ]
	dec rp		# rp--
	dec rp		# rp--
	_dup		# [ a a	|   ] // x dropped because of the decrements
	mov (rp), tos	# [ a x |   ] // but the content was still in memory
}inner

inner{
over over		# [ a b
	mov tos, nos	# [ a b // nos=b
	mov %sp, tos	# [ a sp
	_fetch		# [ a a
	_dip		# [ a b a
}inner

inner{
0= iszero		# [ a
	neg tos		# [ -a		// if tos!=0, set carry
	sbb tos, tos	# [ -carry	// tos = -carry
	inc tos		# [ 1-carry	// 1 if tos was zero, 0 otherwise
}inner

inner{
~ signum		# [ a b
	_nip		# [ b	// nos=a
	sub nos, tos	# [ b-a	// carry=1 if (tos<nos)
	sbb nos, nos	# [ b-a // nos=-carry
	sub tos, nos	# [ b-a // nos-=(b-a); carry=1 if (nos>tos)
	adc nos, tos	# [ b-a-(b-a)+carry // tos is in (-1, 0, +1)
}inner

var here here .word mem
var state state .byte 1
