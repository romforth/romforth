#!/usr/bin/perl -w

# runallsteps : regression test suite
#
# Copyright (c) 2023 Charles Suresh <romforth@proton.me>
# SPDX-License-Identifier: AGPL-3.0-only
# Please see the LICENSE file for the Affero GPL 3.0 license details

use strict;

my $c_check=1;
my $pdp11_check=1;
my $x86_check=1;
my $x86as_check=1;
my $x86user_check=1;
my $x86_32_check=0;
my $x86_sys_check=0;
if (@ARGV) {
	$c_check=0;
	$pdp11_check=0;
	$x86_check=0;
	$x86as_check=0;
	$x86user_check=0;
	$x86_32_check=0;
	$x86_sys_check=0;
	for my $d (@ARGV) {
		$pdp11_check=1 if ( $d eq "pdp11");
		$c_check=1 if ( $d eq "C");
		$x86_check=1 if ( $d eq "x86");
		$x86as_check=1 if ( $d eq "x86-as");
		$x86user_check=1 if ( $d eq "x86-user");
		$x86_32_check=1 if ( $d eq "x86-32");
		$x86_sys_check=1 if ( $d eq "x86-sys");
	}
}

my ($x, $step);

my $c_step;
$x=`cat C/stepfile`;
$x=~s/^/\$/;
eval $x;
$c_step=$step;

my $pdp11_step;
$x=`cat pdp11/stepfile`;
$x=~s/^/\$/;
eval $x;
$pdp11_step=$step;

my $x86_step;
$x=`cat x86/stepfile`;
$x=~s/^/\$/;
eval $x;
$x86_step=$step;

my $x86as_step;
$x=`cat x86-as/stepfile`;
$x=~s/^/\$/;
eval $x;
$x86as_step=$step;

my $x86user_step;
$x=`cat x86-user/stepfile`;
$x=~s/^/\$/;
eval $x;
$x86user_step=$step;

my $x86_32_step;
$x=`cat x86-32/stepfile`;
$x=~s/^/\$/;
eval $x;
$x86_32_step=$step;

my $x86_sys_step;
$x=`cat x86-sys/stepfile`;
$x=~s/^/\$/;
eval $x;
$x86_sys_step=$step;

my $debug=0;
@ARGV=("C/forth.c");
while (<>) {
	if (/^\#define DEBUG/) {
		$debug=1;
	}
}

my $list=[qw(0 0.1 0.2 1 1.1),2..4,qw(4.1 4.2 4.3),5..9,qw(10.1 10.2 10.3),11..62];

for my $i (@$list) {

cport: {
	last cport unless ($c_check);
	last cport if ($i>$c_step);
	@ARGV=("C/fpp.config.C");
	open(my $fh, ">C/fpp.config");
	select $fh;
	print "step=$i\n";
	while (<>) {
		print;
	}
	close $fh;
	select STDOUT;
	print "\nRunning step $i for the C port\n";
	if ($debug) {
		system("make 2>&1 | grep 'Segmentation fault .core dumped.'") ==0 and die "debug make failed at step $i with a segv";
		next;
	}
	system("cd C ; make") == 0 or die "make failed at step $i with exit status $?"
}

pdp11port: {
	last pdp11port unless ($pdp11_check);
	last pdp11port if ($i>$pdp11_step);
	@ARGV=("pdp11/fpp.config.pdp11");
	open(my $fh, ">pdp11/fpp.config");
	select $fh;
	print "step=$i\n";
	while (<>) {
		print;
	}
	close $fh;
	select STDOUT;
	print "\nRunning step $i for the PDP11 port\n";
	system("cd pdp11 ; make") == 0 or die "make failed at step $i with exit status $?"
}

x86port: {
	last x86port unless ($x86_check);
	last x86port if ($i>$x86_step);
	@ARGV=("x86/fpp.config.x86");
	open(my $fh, ">x86/fpp.config");
	select $fh;
	print "step=$i\n";
	while (<>) {
		print;
	}
	close $fh;
	select STDOUT;
	print "\nRunning step $i for the x86 port\n";
	system("cd x86 ; make") == 0 or die "make failed at step $i with exit status $?"
}

x86asport: {
	last x86asport unless ($x86as_check);
	last x86asport if ($i>$x86as_step);
	@ARGV=("x86/fpp.config.x86");
	open(my $fh, ">x86-as/fpp.config");
	select $fh;
	print "step=$i\n";
	while (<>) {
		print;
	}
	close $fh;
	select STDOUT;
	print "\nRunning step $i for the x86-as port\n";
	system("cd x86-as ; make") == 0 or die "make failed at step $i with exit status $?"
}

x86userport: {
	last x86userport unless ($x86user_check);
	last x86userport if ($i>$x86user_step);
	@ARGV=("x86-user/fpp.config.x86");
	open(my $fh, ">x86-user/fpp.config");
	select $fh;
	print "step=$i\n";
	while (<>) {
		print;
	}
	close $fh;
	select STDOUT;
	print "\nRunning step $i for the x86-user port\n";
	system("cd x86-user ; make") == 0 or die "make failed at step $i with exit status $?"
}

x86_32port: {
	last x86_32port unless ($x86_32_check);
	last x86_32port if ($i>$x86_32_step);
	@ARGV=("x86-32/fpp.config.x86");
	open(my $fh, ">x86-32/fpp.config");
	select $fh;
	print "step=$i\n";
	while (<>) {
		print;
	}
	close $fh;
	select STDOUT;
	print "\nRunning step $i for the x86-32 port\n";
	system("cd x86-32 ; make") == 0 or die "make failed at step $i with exit status $?"
}

x86_sysport: {
	last x86_sysport unless ($x86_sys_check);
	last x86_sysport if ($i>$x86_sys_step);
	@ARGV=("x86-sys/fpp.config.x86");
	open(my $fh, ">x86-sys/fpp.config");
	select $fh;
	print "step=$i\n";
	while (<>) {
		print;
	}
	close $fh;
	select STDOUT;
	print "\nRunning step $i for the x86-sys port\n";
	system("cd x86-sys ; make") == 0 or die "make failed at step $i with exit status $?"
}

}
