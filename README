A portable, small, baremetal Forth that can go into the Flash/ROM

Forth is a perfect fit for small, resource constrained systems.

romforth is yet another Forth-like implementation meant to (eventually)
run on most "low end" (ie ROM and RAM constrained) microcontrollers.

By design, this implementation is limited to use just a little over ~256 bytes
of native code with the rest of the functionality implemented in machine
independent code. Currently, ~100 bytes of machine independent Forth related
functionality is used in the x86 implementation. So the overall Flash/ROM
requirement on x86 is currently about ~350 bytes. There is also a regression
test suite which is called at boot as part of init (which can be optionally
#ifdef'ed out) and that currently takes an additional ~500 bytes.
For now, I'll consider the initial bringup/proof of concept on x86 as,
for the most part, done.

romforth is meant to be extended using new "purpose built" Forth words which
can be defined in terms of existing Forth words. The new definitions can be
added in the machine independent "defs.4th" (although architecture specific
definitions should ideally go into "port.4th")

The new words that have been defined can then be called directly as part of
the CPU boot code/initialization by adding them to "rom.4th".

Running "make" will generate a "forth" binary which can be flashed into ROM
(although in the current x86 implementation, all of the native code is only
run within a home grown emulator).

The following (mostly) traditional Forth runtime words are available:
Data Stack operators	: dup drop nip dip swap over rot 2drop third fourth
Data Stack get/set ops	: pick stick
Arithmetic		: + - inc(1+) dec(1-) neg
Memory access		: ! @ c! c@
Comparison operators	: > < >= <= 0= ~
I/O			: key emit p@ p!
Memory allocation	: here alloc
Return stack operators	: >r r>
Call/return		: enter exit call exec
Loop index		: i
Literals		: lit
Bit operators		: & | ^ << >> inv
Control flow		: jmp(branch) jz(branch0) jnz
Stack switch operators	: sp@! rp@!
Halt			: bye
Conditionals		: if{ ... }else{ ... }if
unconditional loop	: loop{ ... }loop
while loop		: loop{ ... }while{ ... }loop
until loop		: loop{ ... }until{ ... }loop
for loop		: for{ ... }for

What is not available, compared to regular Forth, is the dictionary. We make
up for that by providing an "umbilical host"ed solution using a set of scripts,
which runs on the host, and will turn the Forth code into byte code which
can be run on top of the ~350 byte "runtime". This "umbilical host" provides
control flow structures such as conditionals and loop structures.

So, using about ~350 bytes of "runtime", we can write architecture independent
loops (while, until, for), conditionals (if, else), allocate memory, and even
run threads or invoke semi/full-coroutines (if your proclivities tend that way)

It is reasonable to ask what distinguishes this Forth implementation from
the zillion other implementations that already exist. I think the main
distinguishing features are that it is portable, small and runs baremetal:
1. Portable : Although the current "proof of concept" implementation is
	targeted only for x86, it was designed with portability in mind so
	as to eventually be able to run on "most" microcontrollers. The
	primitives implemented in native code are only a few instructions
	each. At most, ~256 bytes of native code will need to be converted.
2. Small : Designed for low end microcontrollers
	On x86, a minimal init needs ~350 bytes of code and 7 bytes of RAM
	As a proof of concept, for even smaller systems, I've coded up an
	x86 bootloader which needs just a dozen bytes of x86 native code
	to load the additional bytes in via any available serial interface
	- either from an "umbilical host" during testing or from, say, an
	external SPI flash part.
3. Baremetal : Runs directly on the hardware, doesn't require any other
	underlying runtime or OS support.

License
=======
All of the code here is licensed under the Affero GPL 3.0 open source license.
For exact details about the license please see the LICENSE file. For the
thinking/intent behind the choice of AGPL, see LICENSE.README

Rationale
=========
For a long winded explanation of why this project exists, see RATIONALE
