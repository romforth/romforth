code{
bye halt
	hlt
}code

define next jmp bp

inner{
key key
	in al, dx	; read it
	mov bl, al	; save as a stashed value
}inner

inner{
emit emit
	mov al, bl	; restore stashed value
	out dx, al	; and echo it out
}inner

define tos bx
define nos cx

define _dup  push tos
define _drop pop tos
define _nip  pop nos
define _neg  neg tos
define _inv  not tos

unary dup  dup  _dup
unary drop drop _drop
unary neg  neg  _neg
unary inv  inv  _inv
unary nip  nip  _nip

fallthru - sub _neg	; tos = -tos # and then fall thru to addition
binary + add add tos, nos
binary & and and tos, nos
binary | or  or  tos, nos
binary ^ xor xor tos, nos
