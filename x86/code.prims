; code.prims : mapping from the Forth primitives to native code (x86 assembly)
;
; Copyright (c) 2022 Charles Suresh <romforth@proton.me>
; SPDX-License-Identifier: AGPL-3.0-only
; Please see the LICENSE file for the Affero GPL 3.0 license details

code{
bye halt
	hlt
}code

define next jmp bp

define tos bx
define nos cx
define   w ax
define  rp di
define  ip si

define _dup  push tos
define _drop pop tos
define _nip  pop nos
define _dip  push nos
define _neg  neg tos
define _inv  not tos
define _inc  inc tos
define _dec  dec tos
define _xchg xchg tos, nos
define _fetch mov tos, [tos]

code{
p@ peek			; [ port	(port:byte) // ready to read
	mov dx, tos	; [ port	// dx is used for in/out
	in al, dx	; [ port	// al = peek(port)
	mov bl, al	; [ XX|byte	// copy from al to bl
	xor bh, bh	; [ byte	// zero the high byte
	jmp restoredx	;		to restore dx (and ah)
}code

code{
p! poke			; [ byte port	// ready to write
	_nip		; [ port	// nos=byte
	mov dx, tos	; [ port	// dx is used for in/out
	mov w, nos	; [ port	// al is used for in/out
	out dx, al	; [ port	// poke(port, al)
	_drop		; [
	jmp restoredx	;		to restore dx (and ah)
}code

code{
call call		; [ x	| w	| ip	]
	mov w, tos	; [ x	| x	| ip	]
	_drop		; [	| x	| ip	]
	jmp save
}code

code{
enter enter		; [ x	| w	| ip	 ] (ip:v)
	lodsw		; [ x	| v	| ip+2	 ]
save:
	xchg w, ip	; [ x	| ip+2	| v	 ]
	stosw		; [ x	| ip+2	| v ip+2 ]
	jmp restoreax	; jmp inner, but restore ax first
}code

inner{
exit exit		; [ x	| w	| ip ret ]
	dec rp		; rp--
	dec rp		; rp--
	mov ip, [rp]	; [ x	| w	|    ret ]
}inner

code{
rot rot			; [ a b c
	_nip		; [ a c		// nos=b
	pop w		; [ c		// w=a
	_dip		; [ b c
	_dup		; [ b c c
	mov tos, w	; [ b c a
	jmp restoreax	; jmp inner, but restore ax first
}code

code{
jmp branch		; [	| w	| ip	] (ip:v)
	lodsb           ; [	| v	| ip+1	] // al=*si++
	cbw		; [	| V	| ip+1	] // sign extend al into ah
	add ip, w	; [	| V	| ip+1+V] // si += ax
	jmp restoreax	; jmp inner, but restore ax first
}code

inner{
jz branchz		; [ x	| w	| ip	]
	neg tos		; [ -x	| w	| ip	] // if tos!=0, set carry
	_drop		; [	| w	| ip	]
	jnc branch	; [	| w	| ip	] // if tos==0, goto branch
	inc ip		; [	| w	| ip+1	] // otherwise skip over offset
}inner

inner{
jnz branchnz		; [ x	| w	| ip	]
	neg tos		; [ x	| w	| ip	] // if tos!=0, set carry
	_drop		; [	| w	| ip	]
	jc branch	; [	| w	| ip	] // if tos!=0, goto branch
	inc ip		; [	| w	| ip+1	] // otherwise skip over offset
}inner

inner{
key key
	_dup		; save tos
	in al, dx	; read from serial port
	xor tos, tos	; just need to clear TOS.h
	mov bl, al	; save byte read in TOS.l
}inner

inner{
emit emit
	mov al, bl	; restore stashed value
	out dx, al	; and echo it out to the serial port
	_drop		; drop displayed value in TOS
}inner


code{
exec exec		; [ x	| w |	]
	mov al, bl	; [ x	| x |	]
	_drop		; [	| x |	]
	jmp w		; exec the code corresponding to that offset
}code

inner{
lit lit			; [ x	| w | ip ] (ip:v)
	_dup		; [ x x	| w | ip ]
	mov tos, w	; [ x w | w | ip ]	// just to preserve AH
	lodsw		; [ x w | v | ip+2 ]
	xchg w, tos	; [ x v | w | ip+2 ]	// to restore AH and set tos
}inner

unary rp@! rpxchg xchg tos, rp
unary sp@! spxchg xchg tos, sp

fallthru 2drop drop2 _drop	; drop	# and then fall thru to drop
unary drop drop _drop
unary dup  dup  _dup
unary neg  neg  _neg
unary inv  inv  _inv
unary nip  nip  _nip

code{
pick pick			; [ n
	add tos, tos		; [ n*2		// tos *= cell; actually
	add tos, sp		; [ sp+n*2	// tos += sp; and then fall thru
}code

				; [ addr	(addr:val)
unary @    fetch _fetch		; [ val

code{
stick stick			; [ v n
	add tos, tos		; [ v n*2	// tos *= cell; actually
	add tos, sp		; [ v sp+n*2	// tos += sp; and then fall thru
}code

inner{
! store				; [ val addr
	pop word [tos]		; [ addr	(addr:val)
	_drop			; [
}inner

inner{
c@ cfetch			; [ addr	(addr:byte)
	mov bl, [tos]		; [ XX|byte	// fetch to lower half of TOS
	xor bh, bh		; [ byte	// clear top half of TOS
}inner

inner{
c! cstore			; [ byte addr
	_nip			; [ addr	// nos=byte
	mov [tos], cl		; [ addr	(addr:byte)
	_drop			; [
}inner
				; [ a b
fallthru swap swap _nip		; [ b	// nos=a and fall thru to xchg
fallthru xchg xchg _xchg	; [ a	// nos=b and fall thru to dip
unary dip  dip  _dip		; [ b a

unary inc  inc  _inc
unary dec  dec  _dec

fallthru - sub _neg	; tos = -tos # and then fall thru to addition
binary + add add tos, nos
binary & and and tos, nos
binary | or  or  tos, nos
binary ^ xor xor tos, nos

inner{
<< shl			; [ n s
	mov cl, bl	; [ n s	// cl <- s.l
	_drop		; [ n
	shl tos, cl	; [ n<<cl
}inner

inner{
>> shr			; [ n s
	mov cl, bl	; [ n s	// cl <- s.l
	_drop		; [ n
	shr tos, cl	; [ n>>cl
}inner

inner{
>r tor			; [ x	|   ]
	mov [rp], tos	; [ x	| x ]
	_drop		; [	| x ]
	inc rp		; rp++
	inc rp		; rp++
}inner

inner{
r> fromr		; [ a	| x ]
	dec rp		; rp--
	dec rp		; rp--
	_dup		; [ a a	|   ] // x dropped because of the decrements
	mov tos, [rp]	; [ a x |   ] // but the content was still in memory
}inner

inner{
over over		; [ a b
	mov nos, tos	; [ a b // nos=b
	mov tos, sp	; [ a sp
	_fetch		; [ a a
	_dip		; [ a b a
}inner

inner{
0= iszero		; [ a
	neg tos		; [ -a		// if tos!=0, set carry
	sbb tos, tos	; [ -carry	// tos = -carry
	inc tos		; [ 1-carry	// 1 if tos was zero, 0 otherwise
}inner

inner{
~ signum		; [ a b
	_nip		; [ b	// nos=a
	sub tos, nos	; [ b-a	// carry=1 if (tos<nos)
	sbb nos, nos	; [ b-a // nos=-carry
	sub nos, tos	; [ b-a // nos-=(b-a); carry=1 if (nos>tos)
	adc tos, nos	; [ b-a-(b-a)+carry // tos is in (-1, 0, +1)
}inner

var here here dw mem
var state state db 1
