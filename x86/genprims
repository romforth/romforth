#!/usr/bin/perl -w

# genprims : convert code.prims into nasm friendly assembly code
#
# Copyright (c) 2022 Charles Suresh <romforth@proton.me>
# SPDX-License-Identifier: AGPL-3.0-only
# Please see the LICENSE file for the Affero GPL 3.0 license details

use strict;

my $mf=shift;	# the map file to be generated
my $gendict=0;
if ($mf eq "-d") {
	$gendict=1;
	$mf=shift;	# the map file to be generated
}

open(my $mh, ">$mf") or die "can't open $mf for writing";

my ($f,$l);	# the forth name($f) and the assembler label ($l)

my $prev="0";

sub genheader {
	my ($f,$l,$flag)=@_;
	my $len=length($f);
	print "$l","_lfa:\tdw $prev\n";
	print "$l","_nfa:\tdb $len\n";
	print qq{\tdb "$f"\n};
	print "$l","_cfa:\tdw $l\n" if ($flag);
	$prev="$l"."_lfa";
}

my $headers=[];

sub mapnames {
	$_=<>;			# read in the next line of input
	($f,$l)=split;		# which provides forth<->label mapping
	s/^\s*$f//;
	s/^\s*$l//;
	print $mh "code $f $l\n";	# create dictionary entry for primitives
	print "$l:$_\n";	# generate the label for the assembler
	if ($gendict) {
		push @$headers, [$f,$l];
	}
}

while (<>) {
	if (/^code\{$/) {		# code{ : start of primitive declaration
		mapnames();		# handle forth word to label mapping
	} elsif (/^\}code$/) {		# }code :end of primitive declaration:
		print "; end of definition of $l -> $f\n";
	} elsif (/^inner\{$/) {		# inner{ : primitives that loop to inner
		mapnames();		# handle forth word to label mapping
	} elsif (/^\}inner$/) {		# }inner : end of word looping to inner
		print "next	; continue within the interpreter\n";
	} elsif (/^unary\s+(\S+)\s+(\S+)\s+(.*)$/) {	# unary operators
		($f,$l)=($1,$2);
		print $mh "code $f $l\n"; # create dictionary entry for unary
		print "$l:\n";		# generate the label for the assembler
		print "\t$3\n";
		print "\tnext\n";
	} elsif (/^binary\s+(\S+)\s+(\S+)\s+(.*)$/) {	# binary operators
		($f,$l)=($1,$2);
		print $mh "code $f $l\n"; # create dictionary entry for binary
		print "$l:\n";		# generate the label for the assembler
		print "\t_nip\n";
		print "\t$3\n";
		print "\tnext\n";
	} elsif (/^fallthru\s+(\S+)\s+(\S+)\s+(.*)$/) {	# "fall thru" operators
		($f,$l)=($1,$2);
		print $mh "code $f $l\n"; # create dictionary entry for fallthru
		print "$l:\n";		# generate the label for the assembler
		print "\t$3\n";
	} elsif (/^define\s+(\S+)\s+(.*)$/) {	# definitions
		print "%define $1 $2\n";
	} elsif (/^var\s+(\S+)\s+(\S+)\s+(.*)$/) {	# variables
		($f,$l)=($1,$2);
		print $mh "var $f $l\n";# create dictionary entry for variables
		if ($gendict) {
			genheader($f,$l,0);
		}
		print "$l:\n";		# generate the label for the assembler
		print "\t$3\n";		# and allocation/initial value if any
	} else {
		print;	# assembler code between code{...}code is passed thru
	}
}

if ($gendict) {
	my $lh;
	open($lh, ">dict.s");
	select $lh;
	for my $h (@$headers) {
		genheader(@$h,1);
	}
	close $lh;
	open($lh, ">latest.s");
	select $lh;
	print "\tdw $prev\n";
	print qq{%include "dict.s"\n};
	close $lh;
	print $mh "label prev $prev\n";
}

close $mh;
