#!/usr/bin/perl6

# genast : Perl6/Raku based parser replacement for genrom
#
# Copyright (c) 2025 Charles Suresh <romforth@proton.me>
# SPDX-License-Identifier: AGPL-3.0-only
# Please see the LICENSE file for the Affero GPL 3.0 license details

multi MAIN(
    Str $out,       #= output map
    Str $in,        #= input map
    Bool :g(:$gendefs) = False,
    Bool :d(:$gendict) = False,
) {
    process($out, [$in]);
}

multi MAIN(
    Str $out,       #= output map
    Str $in,        #= input map
    Str $extras,    #= zero or more other input maps
    Bool :g(:$gendefs) = False,
    Bool :d(:$gendict) = False,
) {
    process($out, [$in, $extras]);
}

my $map={};

my $prev="0";
my $label="lbl000";

sub savelabel($f,$l) {
	# say "in savelabel $f $l\n";
	if ($f eq "fake") {
		$label=$l;
	} elsif ($f eq "prev") {
		$prev=$l;
	} else {
		die "unknown label";
	}
}

grammar triplet {
	rule TOP {
		^ <line>* $
	}
	token line {
		<triples>+ %% "\n"
	}
	rule triples {
			'code' <name> <value> <d>?	{ $map.{$<name>}=$<value>; }
		|	'label' <name> <value>	{ savelabel($<name>, $<value>); }
		|	'def' <name> <value> <d>? 	{ $map.{$<name>}=$<value>; }
		|	'var' <name> <value>	{ $map.{$<name>}=$<value>; }
	}
	regex name { \S+ }
	regex value { \S+ }
	regex d { \d+ }
}

grammar ast {
	rule TOP {
		^ <ast> $
	}
	rule ast {
		<atom>*
	}
	rule atom {
			'if{'	<ast> '}else{' <ast> '}if'
		|	'if{'	<ast> '}if'
		|	'loop{'	<ast> '}while{' <ast> '}loop'
		|	'loop{'	<ast> '}until{' <ast> '}loop'
		|	'loop{'	<ast> '}loop'
		|	'for{'	<ast> '}for'
		|	<opcodes>
	}
	token opcodes {
		<opcode>+ %% ' '
	}
	token opcode {
		|	'^'
		|	'~'
		|	'<'
		|	'<<'
		|	'<='
		|	'>'
		|	'>='
		|	'>>'
		|	'|'
		|	'-'
		|	','
		|	';'
		|	':'
		|	'!'
		|	'@'
		|	'&'
		|	'+'
		|	'0='
		|	'10*'
		|	'2drop'
		|	'2dup'
		|	'2ret'
		|	'3ret'
		|	'align'
		|	'alloc'
		|	'alloca'
		|	'append'
		|	'atoi'
		|	'bl'
		|	'bye'
		|	'c,'
		|	'c!'
		|	'c@'
		|	'call'
		|	'cell'
		|	'cfaexec'
		|	'cold'
		|	'compcfa'
		|	'compdef'
		|	'compile'
		|	'cpl_ex'
		|	'cpl_ex_imm'
		|	'create'
		|	'dec'
		|	'defexec'
		|	'defprefix'
		|	'dip'
		|	'drop'
		|	'd<-t'
		|	'd->t'
		|	'dup'
		|	'emit'
		|	'enter'
		|	'ESCAPE'
		|	'exec'
		|	'exit'
		|	'fake'
		|	'_fa_ke_'
		|	'find'
		|	'fourth'
		|	'here'
		|	'i'
		|	'immediate'
		|	'immediatelfa'
		|	'inc'
		|	'inner'
		|	'inv'
		|	'IO[t]<-n'
		|	'IO[t]->n'
		|	'isdefn'
		|	'isimmediate'
		|	'j'
		|	'#j'
		|	'jdrop'
		|	'jnz'
		|	'#jnz'
		|	'jz'
		|	'#jz'
		|	'key'
		|	'latest'
		|	'lfa2nfa'
		|	'lit'
		|	'lit1'
		|	'literal'
		|	'match'
		|	'mov'
		|	'neg'
		|	'next'
		|	'nip'
		|	'num'
		|	'number'
		|	'offset,'
		|	'outer'
		|	'over'
		|	'override'
		|	'override!'
		|	'override@'
		|	'p!'
		|	'p@'
		|	'parse'
		|	'pick'
		|	'pop'
		|	'prev'
		|	'push'
		|	'>r'
		|	'r>'
		|	'repl'
		|	'resume'
		|	'revstrdup'
		|	'rot'
		|	'rp@!'
		|	'}run'
		|	'run{'
		|	's,'
		|	'same'
		|	'sp@!'
		|	'state'
		|	'stick'
		|	'suffixret'
		|	'swap'
		|	'testnest'
		|	'third'
		|	't_n'
		|	'tuck'
		|	'var'
		|	'vr'
		|	'ws?'
		|	'wscmpr'
		|	'xchg'
		|	\'.\'
		|	\-\d+
		|	\#\d+
		|	\d+
		|	\#\-\d+
		|	0x<[0..9 a..f A..F]>+
		|	'pad0'
	}
}

sub process($out, @ins) {
	triplet.parse(map { $_.IO.lines }, @ins) or die;
	say ast.parse($*IN.slurp-rest);
}
