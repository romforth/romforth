#!/usr/bin/perl6

# genast : Perl6/Raku based parser replacement for genrom
#
# Copyright (c) 2025 Charles Suresh <romforth@proton.me>
# SPDX-License-Identifier: AGPL-3.0-only
# Please see the LICENSE file for the Affero GPL 3.0 license details

multi MAIN(
    Str $out,       #= output map
    Str $in,        #= input map
    Bool :g(:$gendefs) = False,
    Bool :d(:$gendict) = False,
) {
    process($out, [$in]);
}

multi MAIN(
    Str $out,       #= output map
    Str $in,        #= input map
    Str $extras,    #= zero or more other input maps
    Bool :g(:$gendefs) = False,
    Bool :d(:$gendict) = False,
) {
    process($out, [$in, $extras]);
}

my $map={};

my $prev="0";
my $label="lbl000";

sub savelabel($f,$l) {
	# say "in savelabel $f $l\n";
	if ($f eq "fake") {
		$label=$l;
	} elsif ($f eq "prev") {
		$prev=$l;
	} else {
		die "unknown label";
	}
}

grammar triplet {
	rule TOP {
		^ <line>* $
	}
	token line {
		<triples>+ %% "\n"
	}
	rule triples {
			'code' <name> <value>	{ $map.{$<name>}=$<value>; }
		|	'label' <name> <value>	{ savelabel($<name>, $<value>); }
	}
	regex name { \S+ }
	regex value { \S+ }
}

grammar ast {
	rule TOP {
		^ <ast> $
	}
	rule ast {
		<atom>*
	}
	rule atom {
			'if{'	<ast> '}else{' <ast> '}if'
		|	'if{'	<ast> '}if'
		|	'loop{'	<ast> '}while{' <ast> '}loop'
		|	'loop{'	<ast> '}until{' <ast> '}loop'
		|	'loop{'	<ast> '}loop'
		|	'for{'	<ast> '}for'
		|	<opcodes>
	}
	token opcodes {
		<opcode>+ %% ' '
	}
	token opcode {
			sp\@\!
		|	rp\@\!
		|	\>r
		|	r\>
		|	\<\<
		|	\>\>
		|	\>\=
		|	\<\=
		|	0\=
		|	c\@
		|	p\@
		|	\@
		|	c\!
		|	p\!
		|	c\,
		|	s\,
		|	\,
		|	\:
		|	\;
		|	\<
		|	\>
		|	\!
		|	\+
		|	\-
		|	\&
		|	\|
		|	\^
		|	\~
		|	\#\-\d+
		|	\#\d+
		|	\-\d+
		|	\'.\'
		|	\w+
	}
}

sub process($out, @ins) {
	triplet.parse(map { $_.IO.lines }, @ins) or die;
	say ast.parse($*IN.slurp-rest);
}
