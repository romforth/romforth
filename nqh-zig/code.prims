bye	: std.process.exit(0)
dup	: dup()
drop	: drop()
emit	: var c: u8 = @truncate(@as(usize,@intCast(tos))) ; try stdout.print("{c}", .{c}) ; drop
key	: dup ; tos = try stdin.readByte()
neg	: tos = -tos
inc	: tos += 1
dec	: tos -= 1
inv	: tos = ~tos
nip	: nip()
dip	: dip()
+	: nip ; tos += nos
-	: nip ; tos = nos-tos
&	: nip ; tos &= nos
|	: nip ; tos |= nos
^	: nip ; tos ^= nos
2drop	: drop ; drop
swap	: nip ; dup ; tos = nos
@	: var p: *isize = @ptrFromInt(@as(usize, @intCast(tos))) ; tos = p.*
c@	: var p: *i8 = @ptrFromInt(@as(usize, @intCast(tos))) ; tos = p.*
!	: var p: *isize = @ptrFromInt(@as(usize, @intCast(tos))) ; nip ; p.* = nos ; drop
c!	: var p: *i8 = @ptrFromInt(@as(usize, @intCast(tos))) ; nip ; p.* = @intCast(nos) ; drop
vr	: tos = @intCast(@intFromPtr(&varalias[@as(usize,@intCast(tos))].i))
pick	: tos = datastack[sp][d[sp]-@as(usize,@intCast(tos))-1]
stick	: nip ; datastack[sp][d[sp]-@as(usize,@intCast(tos))] = nos ; drop
sp@!	: var temp = sp ; sp = @intCast(tos) ; tos = @intCast(temp)
rp@!	: var temp = rp ; rp = @intCast(tos & 0) ; tos = @intCast(temp)
>r	: retstack[rp][r[rp]] = @intCast(tos) ; r[rp] += 1 ; drop
r>	: dup ; r[rp] -= 1 ; tos = @intCast(retstack[rp][r[rp]])
exec	: b.byte = @intCast(tos) ; drop ; i = b.nqh ; try decode(i.op)
ret	: r[rp] -= 1 ; ip = @intCast(retstack[rp][r[rp]])
call	: retstack[rp][r[rp]] = ip ; r[rp] += 1 ; ip = @intCast(tos) ; drop

var here
var state
