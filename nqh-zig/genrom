#!/usr/bin/perl -w

# genrom : convert the .4th files into zig code
#
# Copyright (c) 2022-2024 Charles Suresh <romforth@proton.me>
# SPDX-License-Identifier: AGPL-3.0-only
# Please see the LICENSE file for the Affero GPL 3.0 license details

use strict;

use Getopt::Long;
my ($gendict,$gendefs)=(0,0);
GetOptions(
	'dict' => \$gendict,
	'gendefs' => \$gendefs,
);

my $mf=shift;	# the map file to which new defs are written
open(my $mh, ">$mf") or die "can't open $mf for writing";

my $map={};	# mapping from forth words to C labels
my $varmap={};	# mapping from forth words to variables
my $defs={};	# mapping from forth words to definition labels
my $deford=[];	# ordered list of definitions

my ($t,$f,$l);	# the type($t), forth name($f) and the C label ($l)

sub code {
	my ($f,$l)=@_;
	$map->{$f}=$l;	# generate the mapping from name to label
}
sub var {
	my ($f,$l)=@_;
	$varmap->{$f}=$l;
}
sub olddef {
	my ($f,$l,$d)=@_;
	$defs->{$f}=$d;
	push @$deford, [$l,$f];
}

my $prev="0";
my $label="lbl000";
sub savelabel {
	my ($f,$l)=@_;
	if ($f eq "fake") {
		$label=$l;
	} elsif ($f eq "prev") {
		$prev=$l;
	} else {
		die "unknown label";
	}
}

my $handle={
	'code' => \&code,
	'var' => \&var,
	'def' => \&olddef,
	'label' => \&savelabel,
};
my @l;
my @args=@ARGV;	# all the args are assumed to have name to label mappings
for my $a (@args) {
	@ARGV=($a);		# read each of the args passed in as a file
	while(<>) {		# reading one line at a time
		($t,$f,@l)=split;# split'ing the line into type, name and label
		$handle->{$t}($f,@l); # and handle each type separately
	}
}

# state event next      action
# 0     def{    1       -
# 0     imm{    1       $immediate=1
# 1     $w      2       $label: ; $w
# 2     }def    0       exit
# 2     }imm    0       exit ; $immediate=0

my $state=0;
my $immediate=0;

my $mapjmp=$map->{'j'};
my $mapjz=$map->{'jz'};
my $mapjnz=$map->{'jnz'};

my @labelstack;

sub runbegin {
	push @labelstack, [$label++, "begin"];
	my $ol=pop @labelstack;
	print join('_', @$ol), ":	// loop{\n";
	$ol->[1]="endloop";
	push @labelstack, $ol;
}

sub rununtil {
	branch("br1");
	my $ol=pop @labelstack;
	print "\n\tPATCH ", join('_', @$ol), "}\n";
	push @labelstack, $ol;
}

sub runwhile {
	branch("br0");
	my $ol=pop @labelstack;
	print "\n\tPATCH ", join('_', @$ol), "}\n";
	push @labelstack, $ol;
}

sub runrepeat {
	my $ol=pop @labelstack;
	branch("jmp");
	print "\n\tPATCH ", $ol->[0], '_begin', "}\n";
	print join('_', @$ol), ":\n";
}

sub runif {
	branch("br0");
	print "\n\tPATCH ", $label, '_then', "}\n";
	push @labelstack, [$label++, "then"];
}

sub runelse {
	my $ol=pop @labelstack;
	branch("jmp");
	print "\n\tPATCH ", $ol->[0], '_endif', "}\n";
	die unless ($ol->[1] eq "then");
	print join('_', @$ol), ":\n";
	$ol->[1]="endif";
	push @labelstack, $ol;
}

sub runthen {
	my $ol=pop @labelstack;
	print join('_', @$ol), ":	// }if\n";
}

sub genprim {
	my ($f)=@_;
	my $m=$map->{$f};
	die "$f has no mapping" unless $m;
	print "\tNqhcode{.op=.prims,.value=.$m}, // $f\n";
}

sub runfor {
	runbegin();
	for my $i (qw(over over >r >r -)) {
		genprim($i);
	}
	runwhile();
}

sub runendfor {
	for my $i (qw(r> inc r>)) {
		genprim($i);
	}
	runrepeat();
	for my $i (qw(r> r> 2drop)) {
		genprim($i);
	}
}

my $imm={
	'loop{'		=> \&runbegin,
	'}until{'	=> \&rununtil,
	'}while{'	=> \&runwhile,
	'}loop'		=> \&runrepeat,

	'if{'		=> \&runif,
	'}else{'	=> \&runelse,
	'}if'		=> \&runthen,

	'for{'		=> \&runfor,
	'}for'		=> \&runendfor,
};

my $d=0;
my $fas=[];

sub def {
	my ($w)=@_;
	if ($state == 0) {
		if ($w eq 'def{') {
			$state=1;
			return 1;
		}
		if ($w eq 'imm{') {
			$state=1;
			$immediate=1;
			return 1;
		}
		return 0;
	}
	if ($state == 1) {
		$l=$label++;
		print $mh "def $w $l $d\n"; # create mapping in "dictionary"
		if ($gendict) {
			my $len=length($w);
			print "static const struct {\n";
			if ($len%2==0) {
				print "\tchar pad;\n";
			}
			print "\tchar name\[$len\];\n";
			print "\tunsigned char nfa;\n";
			print "\tlfa *prev;\n";
			print "\tunsigned short cfa[];\n";
			print "}";
			print "__attribute__((packed)) ${l}={\n";
			if ($len%2==0) {
				print "\t0,\n";
			}
			push @$fas, $l;
			print "\t\"$w\",\n";
			$len |= 0x80 if ($immediate);
			print "\t$len,\n";
			print "\t(lfa *)\&$prev\.prev,\n";
			$prev=$l;
		}
		print " // $w\n";	# and generate C code
		$defs->{$w}=$d++;	# for setting up a local mapping
		push @$deford, [$l,$w];
		$state=2;
		return 1;
	}
	if ($state == 2) {
		if ($w eq '}def') {
			print "\t&&exit-&&next\n};\n";
			$state=0;
			return 1;
		}
		if ($w eq '}imm') {
			print "\t&&exit-&&next\n};\n";
			$state=0;
			$immediate=0;
			return 1;
		}
		return 0;
	}
	die "received $w in state $state";
}

sub branch {
	my ($t)=@_;
	print "\tBytecode{.byte=(\@as(u8,\@intFromEnum(Opcode.$t)) << 5) | ";
}

sub lit32 {
	my ($o)=@_;
	print "\tBytecode{.byte=(\@as(u8,\@intFromEnum(Opcode.jmp))<<5)|0}, // lit32\n";
	# adapted from perldoc -f pack
	for my $u (unpack("W*", pack L=>$o)) {
		my $s=sprintf("\tBytecode\{.byte=%#02x\},\n", $u);
		$s=~s/\=00\}/\=0\}/;
		print $s;
	}
}

sub lit {
	my ($o)=@_;
	if ($o<0) {
		if ($o<-(1<<12)) {
			die "$o is too large to fit in 13 bits";
		}
		my $p=-$o;
		print "\tBytecode{.byte=(\@as(u8,\@intFromEnum(Opcode.lit2)) << 5)|",$p&0x1f,"},\n";
		$p>>=5;
		print "\tBytecode{.byte=$p|0x80},\n";
		return;
	}
	if ($o<32) {
		print "\tBytecode{.byte=(\@as(u8,\@intFromEnum(Opcode.lit1)) << 5) | $o},\n";
	} elsif ($o<(1<<12)) {
		print "\tBytecode{.byte=(\@as(u8,\@intFromEnum(Opcode.lit2)) << 5)|",$o&0x1f,"},\n";
		$o>>=5;
		print "\tBytecode{.byte=$o},\n";
	} else {
		if ($o<1<<31) {
			lit32($o);
		} else {
			die "$o is too large to fit in 32 bits";
		}
	}
}

my $ref=0;
my $varhash={
	'here' => 0,
	'state' => 1,
};
sub variable {
	my ($o)=@_;
	lit($varhash->{$o});
	print "\tBytecode{.nqh=Nqhcode{.op=.prims,.value=.vr}},\n";
}

my $mode='';
my $m;					# cache for the map from name to label
while (<>) {				# map forth words in the standard input
	for $f (split) {		# for each word to their equivalent
		if ($m=$map->{$f}) {	# byte offset within the binary
			if ($mode eq 'literal') {
				print "\tBytecode{.nqh=Nqhcode{.op=.prims,.value=.$m}}, // $f\n";
				$mode='';
				next;
			}
			print "\tBytecode{.nqh=Nqhcode{.op=.prims,.value=.$m}}, // $f\n";
		} elsif ($m=$varmap->{$f}) {	# variables just need to
			variable($m);		# push their address
		} elsif (defined($m=$defs->{$f})) { # definitions just need
			print "\t&&enter-&&next, $m, // $f\n";	# their offset
		} elsif ($m=$imm->{$f}) { # immediates need to be run
			$m->();		  # well, immediately
		} else {		# or whine if the mapping doesn't exist
			last if ($f eq '[');	# skip to end of line
			next if def($f);
			if ($f =~/^\'(.)\'$/) {	# char in single quotes
				lit(ord($1)); # to get the ascii value
				next;
			} elsif ($f =~/^(-?\d+)$/) {
				lit(int($1)); # atoi equivalent
				next;
			} elsif ($f =~/^(-?0x[\dA-Fa-f]+)$/) {
				lit(oct($1)); # hex conversion
				next;
			} elsif ($f=~/^\#(-?\d+)$/) {
				my $i=int($1); # "immediate" assembly equivalent
				if ($i>=16 or $i<-16) {
					die "jump offset is too large";
				}
				if ($i<0) {
					$i=15-$i;
				}
				print $i&0x1f, "},\n";
				next;
			} elsif ($f eq 'j') {
				branch("jmp");
				next;
			} elsif ($f eq 'jz') {
				branch("br0");
				next;
			} elsif ($f eq 'jnz') {
				branch("br1");
				next;
			} elsif ($f eq 'pad0') {
				print "\tBytecode{.byte=0},\n";
				next;
			} elsif ($f eq 'lit') {
				print "\tBytecode{.byte=(\@as(u8,\@intFromEnum(Opcode.jmp))<<5)|0}, // lit32\n";
				$mode='literal';
				next;
			}
			die "unknown word: $f"
		}
	}
}
if ($gendefs) {
	print 'static const unsigned short *fp[] = {', "\n";
	for my $i (@$deford) {
		print "\t$i->[0]\.cfa,	// $i->[1]\n";
	}
	print "};\n";
}
print $mh "label fake $label\n";
if ($gendict) {
	open(my $lh, ">latest.h");
	select $lh;
	print "\tvars.latest=(lfa *)&$prev\.prev;\n";
	close $lh;
	print $mh "label prev $prev\n";
}
close $mh;
