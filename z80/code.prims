# code.prims : mapping from the Forth primitives to Z80 assembly
#
# Copyright (c) 2023 Charles Suresh <romforth@proton.me>
# SPDX-License-Identifier: AGPL-3.0-only
# Please see the LICENSE file for the Affero GPL 3.0 license details

inner	: ld wl, (ip) ; inc ip ; jp (w)
next	: jr inner
bye	: halt
dup	: push tos ;
2drop	: pop tos
drop	: pop tos ;
key	: dup ; ld w, #0x7fff ; ld (w), #'r' ; ld tosl, (w) ; ld w, #cold ;
emit	: ld w, #0x7fff ; ld (w), #'w' ; ld (w), tosl ; ld w, #cold ; jp drop
lit	: jp reallit
inv	: ld a, tosh ; cpl ; ld tosh, a ; ld a, tosl ; cpl ; ld tosl, a ;
neg	: inv ; inc tos ;
jnz	: ld a, tosl ; or a, tosh ; pop tos ; jp nz, realj ; inc ip ;
jz	: ld a, tosl ; or a, tosh ; pop tos ; jp z, realj ; inc ip ;
j	: jp realj
inc	: inc tos ;
dec	: dec tos ;
nip	: pop nos ;
dip	: push nos ;
-	: neg
+	: nip ; ld a, nosl ; add a, tosl ; ld tosl, a ; ld a, nosh ; adc a, tosh ; ld tosh, a ; jp inner
&	: nip ; ld a, nosl ; and a, tosl ; ld tosl, a ; ld a, nosh ; and a, tosh ; ld tosh, a ; jp inner
|	: nip ; ld a, nosl ; or a, tosl ; ld tosl, a ; ld a, nosh ; or a, tosh ; ld tosh, a ; jp inner
^	: nip ; ld a, nosl ; xor a, tosl ; ld tosl, a ; ld a, nosh ; xor a, tosh ; ld tosh, a ; jp inner
swap	: nip ; dup ; ld tosl, nosl ; ld tosh, nosh ; jp inner
pick	: ld (rpsave), rp ; dup ; pop rp ; add rp, rp ; add rp, sp ; jp mfetch
@	: ld (rpsave), rp ; dup ; pop rp ; jp mfetch
stick	: ld (rpsave), rp ; dup ; pop rp ; add rp, rp ; add rp, sp ; jp mstore
!	: ld (rpsave), rp ; nip ; dup ; pop rp ; jp mstore
c@	: jp cfetch
c!	: jp cstore
sp@!	: jp spfs
rp@!	: jp rpfs
>r	: jp tor
r>	: jp fromr

var state	.db 1
var here	.dw mem
