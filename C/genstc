#!/usr/bin/perl -w

# genstc : convert the .4th files into "subroutine threaded" C code
#
# Copyright (c) 2022 Charles Suresh <romforth@proton.me>
# SPDX-License-Identifier: AGPL-3.0-only
# Please see the LICENSE file for the Affero GPL 3.0 license details

use strict;

my $mf=shift;   # the map file to which new defs are written

open(my $mh, ">$mf") or die "can't open $mf for writing";

my $map={};     # mapping from forth words to C functions
my $varmap={};  # mapping from forth words to variables
my $defs={};    # mapping from forth words to C functions

my ($t,$f,$l);  # the type($t), forth name($f) and the C switch label ($l)

sub code {
	my ($f,$l)=@_;
	$map->{$f}=$l;	# generate the mapping from name to label
}

sub var {
	my ($f,$l)=@_;
	$varmap->{$f}=$l;
}

sub olddef {
	my ($f,$l)=@_;
	$defs->{$f}=$l;
}

my $label="lbl000";
sub savelabel {
	my ($f,$l)=@_;
	$label=$l;
}

my $handle={
	'code' => \&code,
	'var' => \&var,
	'def' => \&olddef,
	'label' => \&savelabel,
};
my @args=@ARGV;	# all the args are assumed to have name to label mappings
for my $a (@args) {
	@ARGV=($a);		# read each of the args passed in as a file
	while(<>) {		# reading one line at a time
		($t,$f,$l)=split;# split'ing the line into type, name and label
		$handle->{$t}($f,$l); # and handle each type separately
	}
}

# state event next      action
# 0     def{    1       -
# 1     $w      2       void $label() {
# 2     }def    0       }

my $state=0;

sub def {
	my ($w)=@_;
	if ($state == 0) {
		if ($w eq 'def{') {
			$state=1;
			return 1;
		}
		return 0;
	}
	if ($state == 1) {
		$l=$label++;
		print $mh "def $w $l\n"; # create mapping in "dictionary"
		print "void $l() {	// $w\n"; # and generate C function map
		$defs->{$w}=$l;		 # for setting up a local mapping
		$state=2;
		return 1;
	}
	if ($state == 2) {
		if ($w eq '}def') {
			print "}\n";
			$state=0;
			return 1;
		}
		return 0;
	}
	die "received $w in state $state";
}

sub lit {
	my ($o)=@_;
	print qq[\tlit($o);\n];
}

sub runif {
	print "\t{\n\t\tcell c=tos; _drop; if(c) {\n";
}

sub runelse {
	print "\t\t} else {\n";
}

sub runthen {
	print "\t\t}\n\t}\n";
}

my $imm={
	'loop{'		=> \&runbegin,
	'}until{'	=> \&rununtil,
	'}while{'	=> \&runwhile,
	'}loop'		=> \&runrepeat,

	'if{'		=> \&runif,
	'}else{'	=> \&runelse,
	'}if'		=> \&runthen,

	'for{'		=> \&runfor,
	'}for'		=> \&runendfor,
};

my $m;
while (<>) {			# map forth words in the standard input
	for $f (split) {	# for each word to their equivalent
		if ($m=$map->{$f}) {	# function name
			print "\t", $m, "();\n";
		} elsif ($m=$imm->{$f}) { # immediates need to be run
			$m->();		  # well, immediately
		} elsif ($m=$varmap->{$f}) { # variables just need to
			print "\t", $m, "();\n"; # push their address
		} elsif ($m=$defs->{$f}) {	# definitions just need to
			print "$m", "();\n";	# be called
		} else {
			last if ($f eq '[');    # skip to end of line
			next if def($f);
			if ($f =~/^\'(.)\'$/) {	# char in single quotes
				lit(ord($1)); # to get the ascii value
				next;
			} elsif ($f =~/^(-?\d+)$/) {
				lit(int($1)); # atoi equivalent
				next;
			} elsif ($f =~/^(-?0x[\dA-Fa-f]+)$/) {
				lit(oct($1)); # hex conversion
				next;
			}
			die "unknown word: $f"
		}
	}
}
