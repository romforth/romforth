# code.prims : mapping from the Forth primitives to C code
#
# Copyright (c) 2022-2023 Charles Suresh <romforth@proton.me>
# SPDX-License-Identifier: AGPL-3.0-only
# Please see the LICENSE file for the Affero GPL 3.0 license details

next	: debugstk(tos, d, datastk, r, returnstk); goto *(&&next+*ip++)
bye	: return 0
dup	: *d++=tos ;
2drop	: tos=*--d
drop	: tos=*--d ;
key	: dup ; tos=getchar() ;
emit	: putchar(tos) ; drop ;
lit	: dup ; tos=*(int *)ip ; ip+=sizeof(int)/sizeof(*ip) ;
neg	: tos=-tos ;
jnz	: tos=!tos
jz	: if (tos==0) {{} ; drop
j	: i=*ip++; ip+=i; } else { ip++ ; drop ; } ;
inc	: tos++ ;
dec	: tos-- ;
inv	: tos=~tos ;
nip	: nos=*--d ;
dip	: *d++=nos ;
-	: neg
+	: nip ; bin(+) ;
&	: nip ; bin(&) ;
|	: nip ; bin(|) ;
^	: nip ; bin(^) ;
swap	: nip ; dup
t_n	: tos=nos ;
@	: tos=*(int *)((char *)&ram+tos) ;
!	: nip ; *(int *)((char *)&ram+tos)=nos ; drop ;
c@	: tos=*(char *)((char *)&ram+tos) ;
c!	: nip ; *(char *)((char *)&ram+tos)=nos ; drop ;
pick	: tos=*(d-tos-1) ;
stick	: nip ; *(d-tos)=nos ; drop ;
sp@!	: swapstk(tos, d, datastk) ;
rp@!	: swapstk(tos, r, returnstk) ;
>r	: *r++=tos ; drop ;
r>	: dup ; tos=*--r ;
exec	: i=tos ; drop ; goto *(&&next+i)
enter	: i=*ip++ ; *m++=ip ; ip=fp[i] ;
exit	: ip=*--m ;
>m	: *m++=tos ; drop ;
m>	: dup ; tos=*--m ;
call	: *m++=ip ; ip=(unsigned short *)tos ; drop ;
p@	: if (tos==0xFF70) { tos=1<<7; } else { tos=getchar(); } ;
p!	: nip ; putchar(nos) ; drop ;
<<	: nip ; bin(<<) ;
>>	: nip ; bin(>>) ;
over	: dup ; tos=*(d-2) ;

var here
var state
