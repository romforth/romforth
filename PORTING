The following ports are complete:
=================================

.-------------.------.--------.---.-----------.------------.---------------.
| CPU         | Bits | Endian | T | API       | Build      |     Test      |
+-------------+------+--------+---+-----------+------------+---------------+
| x86         |  16  | little | 1 | Baremetal | nasm       | DIY emulator  |
| x86-as      |  16  | little | 1 | Baremetal | GNU as     | DIY emulator  |
| PDP11       |  16  | little | 2 | Baremetal | GNU as     | simh/pdp11    |
| x86-user    |  64  | little | 1 | libc/musl | gcc/zig cc | Host/Native   |
| C/x86       |  64  | little | 3 | libc/musl | gcc/zig cc | Host/Native   |
| x86-32      |  32  | little | 1 | libc/musl | gcc/zig cc | Host32/Native |
| x86-sys     |  64  | little | 1 | Linux/sys | GNU as     | Host/Native   |
| m68k        |  32  |  big   | 1 | Linux/sys | GNU as     | qemu-m68k     |
| sparc       |  32  |  big   | 1 | Linux/sys | GNU as     | qemu-sparc    |
| z80-c       |  16  | little | 3 | Baremetal | sdcc       | ucsim/sz80    |
| z80         |  16  | little | 1 | Baremetal | sdasz80    | ucsim/sz80    |
| z180-sdcc   |  16  | little | 3 | Baremetal | sdcc       | ucsim/sz80    |
| z80n-sdcc   |  16  | little | 3 | Baremetal | sdcc       | ucsim/sz80    |
| msp430-as   |  16  | little | 2*| Baremetal | msp430-gcc | mspdebug      |
| arm-zigcc   |  64  | little | 3 | libc/musl | gcc/zig cc | qemu-aarch64  |
| arm64-sys   |  64  | little | 1 | Linux/sys | GNU as     | qemu-aarch64  |
| riscv-zigcc |  64  | little | 3 | libc/musl | gcc/zig cc | qemu-riscv64  |
| rv64-sys    |  64  | little | 1 | Linux/sys | GNU as     | qemu-riscv64  |
| rv32-sys    |  32  | little | 1 | Linux/sys | GNU as     | qemu-riscv32  |
| msp430-stc  |  16  | little | 4 | Baremetal | msp430-gcc | mspdebug      |
| z80-stc     |  16  | little | 4 | Baremetal | sdasz80    | ucsim/sz80    |
'-------------'------'--------'---'-----------'------------'---------------'

Notes for the table above:
	T : The "thread" type used in the interpreter - this needs some form of
		a mapping to the usual Forth notation of DIRECT/INDIRECT/STC/...
	The sample code shown below is delimited using the '|' character
		... | lit | 1 | lit | 2 | + | ... | enter | XX | YY | ...
	where the '|' can signify either a byte or a cell boundary.

	Thread type 1 has the following invocation format:
		| enter | cfa:cell |
		The cfa points to an address which contains a bytecode sequence
		ending in 'exit' - for eg: | ... | exit |
		where the ... denotes the actual body of the defined word.
		The 'enter'/'exit' and 'lit' listed above are primitives which
		use up a single byte and are usually offsets to the machine
		executable code (which enforces the 256 byte machine code limit)

	Thread type 2 has the following invocation format:
		| cfa:cell |
		where cfa contains: | enter | ... | exit
		The 'enter'/'exit' are usually machine code constructs that
		handle the return stack handling logic and the body of the
		definition (which is denoted by '...') is in turn made up of
		cell sized references to other words.

	Thread type 3 is used in C implementations and has the format:
		| enter | cfa:PRIMSZ |
		The cfa in this case is just an index into a table which is a
		pointer to the "real cfa" which contains the actual bytecode
		sequence terminated as usual with 'exit'. The width of the cfa
		may be compiler dependent and is shared with Forth by using the
		PRIMSZ configuration variable.

	Thread type 4 is used to denote subroutine threaded code (STC)

	There is also a prim_var_deref setting which is meant to modify the
	semantics of how cfa's are handled by the various threading schemes.

	When prim_var_deref is set to 1 it means that the primitives and
	variables are "encapsulated" in a header which can look like this:
		variable:	| lit | var | return |
		primitive:	| prim | return |
	This is denoted by the addition of a * after the thread type for some
	ports (for example, see the entry for msp430-as which is marked 2*)

Porting Guide
=============
This is just a high level summary of the more detailed steps outlined in
pseudo/code. The very first "preamble" step is to pick a porting target and
figure out the build/emulate/test toolchain.

If you prefer to look at an existing implementation as a guide, you could pick
any one of the completed ports and follow each of those steps until all steps
are complete. For example the following command will show the changes at each
step in chronological order for the Z80 port:
	git log -p --reverse 09acfe0067d090a49d0b9b611103b98d6cfcb2da..HEAD

Instead, if you prefer to get a more abstract view, you can look at the steps
outlined in pseudo/code.

Currently there are a total of about 73 "bite size" steps. The first few steps
can be summarized as getting the equivalent of the following code in C running
on your target system: int main() { putchar( getchar() ); exit(0); }

These represent the external/environmental dependencies of your implementation.

From an operational point of view, after you have setup the directory for a new
port (for example, by using the "newport" script to setup the directory), you
just need to make the appropriate changes at each step and then keep running
the following command after each step:
	../git_auto_commit $(basename $PWD)
from within that directory and this will take care of creating a git commit
with the appropriate subject line for each step.

Since the makefile is very target dependent, you could make a copy of any one
of the existing ports and modify as appropriate.

At step 22, you will need to switch from oneforth to twoforth in the makefile
At step 41, you will need to switch from twoforth to threeforth in the makefile
After step 62, you can switch from threeforth to fourforth in the makefile.
See the corresponding changes that were made in the commit history of the z80
port for details (ignore the earlier ports where these changes were made kinda
helter-skelter)

To make porting easier, the machine independent code in Forth uses a bunch of
configuration settings which are stored in the fpp.config.* files. These need
to be modified as appropriate. Although some of the config parameters need to
be cleaned up since they represent $TECHDEBT from the path dependent evolution
of the code, I'll go ahead and document them here, for now. Note that any/all
of these parameters may be removed/cleaned up as the porting progresses.

ARCH is a descriptive string to denote the architecture.

PRIMSZ is the number of bytes required to denote a primitive. If the jump offset
requires just a byte like most architectures, use 1. If it needs a short like
the initial C port or uses a physical 16-bit address like the PDP11, use 2.
A 2 byte offset should be more than sufficient for a primitive.

JUMP is the jump offset required for the 'j' opcode
JUMPBACK is the negative jump offset required for the 'jz'/'jnz' opcode tests
These are currently used starting at step 4.2
Assume that the code is:
	j       [       // raw opcode test of the 'j' operator
	#JUMP   [       // the byte offset to skip over the assert below
	#assert
and assume that it translates to the following bytecode sequence
	j #JUMP lit $litl $lith emit
It is obvious that #JUMP must be 4 to skip past the assert code sequence which
consists of a lit followed by emit, if we assume each of the space separated
tokens is one byte long and the IP was incremented before the jump.

Similarly, assume that the test code at step 4.3
	jz              [       // raw opcode test of the 'jz' operator
	#JUMPBACK       [       // negative jump
expands to the following bytecode:
	jz #JUMPBACK
If the IP is incremented before the jump, it is quite clear that #JUMPBACK
must be -2 (254) for the test to be effective, assuming each of the space
separated tokens needs one byte.

ADDR and VALUE are used in the memory tests starting at step 13

RGROWLOW is used starting at step 19 and is just a flag denoting the direction
of the growth of the return stack. Set RGROWLOW=0 if the return stack grows to
higher addresses. Use RGROWLOW=1 if the the return stack grows to low addresses.

RSTKSZ is the size (in bytes) required for the return stack. It is currently
sized at ~25 entries so this needs to be multiplied with the size of an entry
to get the appropriate value.

big_endian denotes the endianness of the architecture. Little endian archs such
as x86 set big_endian=0 and SPARC/m68k use big_endian=1

offset is set to a value 1 less than the size of a lit. Ideally given LITC,
offset is superfluous, but it was added before LITC so it persists vestigially
so it all sounds straightforward until you get to the C port where LITC==4,
but offset is 1 which I need to understand better.

prim_var_deref was added as a band-aid during the C port as well. If it is set
to 1 it means the dictionary layout of the primitive CFA is along the lines of:
	lit $priml $primh call exit
which was used to distinguish it from the earlier CFA layout which contained
just the offset of the primitive.

CELL denotes the length of a pointer value (in bytes)

SERIALIN, SERIALOUT, TTYCSR and BIT are vestigeal holdovers from the PDP11 port.
These have been shoehorned into the later ports for compatibility but are not
strictly required, depending on how p@/p! are implemented.

The NEEDPFETCH, NEEDPSTORE, NEEDSIGNUM, NEEDZEROEQ, NEEDROT are set to 1 if
the corresponding definition should use the machine independent definition from
defs.4th. If these are defined as primitives (or by other means), these can be
set to 0 (or removed).

THREAD denotes the type of Forth "threading" used by the interpreter. The
current options are 1, 2, 3 and 4.

More notes documenting the THREAD configuration parameter is given as part of
the explanation of the 'T'hread type in the "Notes" section below the table of
completed ports listed earlier.

ALIGN is used to denote alignment requirements. Architectures that don't have
alignment restrictions can use ALIGN=0. ALIGN=4 denotes a 32 bit alignment.

LITC denotes the size of literals in bytes and must match the size of a store.

If you make it safely past step 38, debugging becomes a bit easier by setting
the config parameter 'debug' to 1.

TESTROM can be set to 0 to generate a build with all of the tests disabled.
