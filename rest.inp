#{if step>=55
#{ifdef TESTROM
: foo 12345 ; foo 
latest @ @ latest ! 
3ret 
#}ifdef
#}if
#{if step>=56
: [ 10 parse 2drop ; immediate [ comments should start working from here on out
#{ifdef TESTROM
: foo		[	// verify that comments work within definitions as well
	4321	[ 4321
; foo 		[	// and invoke foo for later verification
latest @ @ latest !	[ // clean up after ourselves to restore the dictionary
3ret			[ // and switch back to test from within the outer repl
#}ifdef
#}if
#{if step>=57
[ // Reserve a zero-filled patch'able byte/cell for storing a branch offset
: offset
	0	[ 0
	offset,	[ \ 0
	here	[ here
	@	[ h
;
[ // if{ is just syntax sugar replacement for the traditional Forth IF keyword
: if{
	lit	[	// lit escapes the following byte(s)
	jz	[ jz	// escaped by lit
#{if offset==1
	lit	[ jz	// padding used for 1 byte offset, escaped by lit
#}if
	offset,	[ \ jz
	offset	[ h \ 0
;
immediate
[ // patch is used to back patch the offset which was generated by "offset"
: patch		[ o h
	over	[ o h o
	-	[ o n:h-o
	swap	[ n o
	dec	[ n a:o-1
#{if THREAD==1
	c!	[ (a:n)
#}if
#{if THREAD==2
	dec	[ n a:a-1
	!	[ (a:n)
#}if
;
[ // }if is just syntax sugar replacement for traditional Forth's THEN
[ // it patches up the reserved offset saved on the stack at the start
: }if		[ o
	here	[ o here
	@	[ o h
	patch
;
immediate
[ test if{ ... }if using a simple definition:
[ ?dup : dup's the tos only if it is non-zero
: ?dup			[ n
	dup		[ n n
	if{		[ n	// n != 0
		dup	[ n n
	}if		[ n n?	// not dup'ed if n==0
;
#{ifdef TESTROM
0	[ 0
?dup	[ 0
1	[ 0 1
?dup	[ 0 1 1
3ret
#}ifdef
#}if
