# genheader : misc header generation shared between genrom and genprims
#
# Copyright (c) 2025 Charles Suresh <romforth@proton.me>
# SPDX-License-Identifier: AGPL-3.0-only
# Please see the LICENSE file for the Affero GPL 3.0 license details

my $name=[];
my $dict_decl={};

sub mapf16 {			# map from a number 0-15 to F16 opcode
	my ($n)=@_;
	die if ($n<0);
	die if ($n>15);
	return '.'.(
		"Push",		# 0
		"Pop",		# 1
		"Mov",		# 2
		"Xch",		# 3
		"Inv",		# 4
		"Neg",		# 5
		"Add",		# 6
		"Sub",		# 7
		"And",		# 8
		"Or",		# 9
		"Xor",		# A
		"Shl",		# B
		"Shr",		# C
		"Exec",		# D
		"Call",		# E
		"Enter",	# F
	)[$n];
}

sub lit32 {
	my ($o)=@_;
	print "\tBytecode{.byte=(\@as(u8,\@intFromEnum(Opcode.jmp))<<5)|0}, // lit32\n";
	# adapted from perldoc -f pack
	for my $u (unpack("W*", pack L=>$o)) {
		my $s=sprintf("\tBytecode\{.byte=%#02x\},\n", $u);
		$s=~s/\=00\}/\=0\}/;
		print $s;
	}
}

sub lit {
	my ($o)=@_;
	if ($o<0) {	# -ve numbers always use the full 16 bit representation
			# pop sub a b c d
		if ($o<-32768) {
			die "$o is too large to fit in 16 bits. Range: -32768..32767 ";
		}
		print "\t[_]Opcode{ .Pop, .Sub, ";
		my $n=$o&0xffff;
		my $mask=0xf000;
		my $rsh=16;
		while ($rsh>0) {
			$rsh-=4;
			print mapf16(($o&$mask) >> $rsh), ", ";
			$mask>>=4;
		}
		print "} ++\n";
		return;
	}
	if ($o<16) { # use lit4
		print "\t[_]Opcode{ .Pop, .Neg, ",
			mapf16($o), "} ++\n";
		return;
	}
	if ($o<256) { # use lit8
		print "\t[_]Opcode{ .Pop, .Add, ",
			mapf16($o>>4), ", ",
			mapf16($o&0xf), "} ++\n";
		return;
	}
	if ($o<32768) { # use lit16
		print "\t[_]Opcode{ .Pop, .Sub, ",
			mapf16($o>>12), ", ",
			mapf16($o>>8), ", ",
			mapf16($o>>4), ", ",
			mapf16($o&0xf), "} ++\n";
		return;
	}
	die "$o is too large to fit in 16 bits. Range: -32768..32767 ";
}

my $varhash={
	'here' => 0,
	'state' => 1,
};

sub variable {
	my ($o)=@_;
	die $o unless defined ($varhash->{$o});
	lit($varhash->{$o});
	print "\tBytecode{.nqh=Nqhcode{.op=.prims,.value=.vr}},\n";
}

if (-f "headers.list") {
	open(my $headers, "headers.list");
	while (<$headers>) {
		if (/^Name(\d+)$/) {
			$name->[$1]=$1;
		}
	}
	close $headers;
}
open(my $headers, ">>headers.list");

sub genheader {
	my ($f,$l,$flag,$lh,$prev,$imm)=@_;
	my $len=length($f);
	my $fh=select $lh;
	unless (defined $name->[$len]) {
		print $headers "Name$len\n";
		$name->[$len]=$len;
		print "const Name$len = packed struct {\n";
		for my $i (1..$len) {
			print "\tc$i: u8,\n";
		}
		print "};\n\n";
	}
	my $v=\$dict_decl->{$l};
	if (my $vv=$$v) {
	} else {
		$$v=$l;
		print "const Dictionary_${l} = packed struct {\n";
		print "\tname: Name$len,\n";
		print "\tnfa: u8,\n";
		if ($prev) {
			print "\tlfa: Lfa,\n";
		} else {
			print "\tlfa: ?Lfa,\n";
		}
		print "\tcfa: *Bytecode,\n";
		print "};\n\n";
	}
	print "const ${l}_dict = Dictionary_${l}{\n";
	print "\t.name = .{\n";
	my $snames=[split('',$f)];
	for my $i (1..$len) {
		print "\t\t.c$i = '", $snames->[$i-1], "',\n";
	}
	print "\t},\n";
	print "\t.nfa = $len";
	print "|0x80" if ($imm);
	print ",\n";
	if ($prev) {
		print "\t.lfa = \&${prev}_dict.lfa,\n";
	} else {
		print "\t.lfa = null,\n";
	}
	print "\t.cfa = \@ptrCast(\&${l}_bytes),\n";
	print "};\n\n";
	print "const ${l}_bytes = [_]Bytecode{\n";
	if ($flag eq 'prim') {		# primitive
		print "\tPrims.$l,\n";
		print "};\n";
	} elsif ($flag eq 'var') {	# variable
		variable($f);
		print "};\n";
	} elsif ($flag eq 'def') {	# definition
	} else {
		die "unknown type";
	}
	$prev=$l;
	select $fh;
	return $l;
}
