#!/usr/bin/perl -w

# genprims : convert code.prims into zig code
#
# Copyright (c) 2022-2025 Charles Suresh <romforth@proton.me>
# SPDX-License-Identifier: AGPL-3.0-only
# Please see the LICENSE file for the Affero GPL 3.0 license details

use strict;

my $mf=shift;	# the map file to be generated

my $gendict=0;
if ($mf eq "-d") {
	$gendict=1;
	$mf=shift;	# the map file to be generated
}
open(my $mh, ">$mf") or die "can't open $mf for writing";

my $lh;
if ($gendict) {
	open($lh, ">dict.zig");
}

my ($f,$l);	# the forth name($f) and the C goto label ($l)

my $prev="0";
#require "./genheader";

my $headers=[];

my $xl=0;
my $cnames=[];
sub mapnames {
	($f,$l)=@_;		# which provides forth<->label mapping
	print $mh "code $f $l\n";	# create dictionary entry for primitives
	print "const $l = [_]Opcode{\n";# generate the label
	#print "#ifdef PROFILE\n";
	#print "count\[$xl\]++;\n";
	#print "#endif\n";
	$xl++;
	push @$cnames, "$l,";
	if ($gendict) {
		push @$headers, [$f,$l];
	}
}

my $hash={};
my $agg=[];
my $label="lbl000";
while (<>) {
	/^\#/ and next;
	if (s/^\s*(\S+)\s+:\s+//) {
		$f=$1;
		if ($f=~/^[a-z]\w*$/) {
			mapnames($f, $f);
		} else {
			mapnames($f, $label++);
		}
		for my $w (split(' ;')) {
			chomp $w;
			$w=";" unless ($w);
			$w=~s/^\s+//;
			if ($l=$hash->{$w}) {
				print join(", ",@$l), "\n";
				push @$agg, @$l unless ($w eq ";");
			} else {
				print "\t$w\n";
				push @$agg, $w;
			}
		}
		print "};\n";
		$hash->{"$f"}=[@$agg];
		$agg=[];
		next;
	}
	if (/^define\s+(\S+)\s+(.*)$/) {	# definitions
		print "#define $1 $2\n";
		next;
	} elsif (/^var\s+(\S+)\s+(.*)$/) {	# variables
		($f)=($1);
		print $mh "var $f $f\n";# create dictionary entry for variables
		if ($gendict) {
			$prev=genheader($f,$f,'var',$lh,$prev,0);
		}
		next;
	}
	next if (/^\s*$/);
	chomp;
	die "unknown declaration: '$_'";
}

print $mh "label fake $label\n";
if ($gendict) {
	select $lh;
	for my $h (@$headers) {
		$prev=genheader(@$h,'prim',$lh,$prev,0);
	}
	close $lh;
	open($lh, ">latest.h");
	select $lh;
	print "\tvars.latest=&$prev\.prev;\n";
	close $lh;
	print $mh "label prev $prev\n";
}

close $mh;
my $pf="prims.m4";
open(my $ph, ">$pf") or die "can't open $pf for writing";
my $x=0;
for my $i (@$cnames) {
	print $ph "$i\n";
	$x++;
}
close $ph;
