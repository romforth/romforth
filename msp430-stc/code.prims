bye	: br #halt
dup	: mov tos, @dsp ; incd dsp
drop	: decd dsp ; mov @dsp, tos
key	: dup ; mov #0xff, w ; mov.b @w, tos
emit	: mov #0xff, w ; mov.b tos, @w ; drop
neg	: INV tos ; INC tos
j	: .equ JOP,0x3c
jz	: decd dsp ; and tos, tos ; mov @dsp, tos ; .equ JOP,0x24
jnz	: decd dsp ; and tos, tos ; mov @dsp, tos ; .equ JOP,0x20
inc	: INC tos
dec	: DEC tos
inv	: INV tos
nip	: decd dsp ; mov @dsp, nos
dip	: mov nos, @dsp ; incd dsp
-	: nip ; sub tos, nos ; mov nos, tos
+	: nip ; add nos, tos
&	: nip ; and nos, tos
|	: nip ; bis nos, tos
^	: nip ; xor nos, tos
2drop	: drop ; drop
swap	: nip ; dup ; mov nos, tos
@	: mov @tos, tos
!	: nip ; mov nos, @tos ; drop
c@	: mov.b @tos, tos
c!	: nip ; mov.b nos, @tos ; drop
pick	: rla tos ; mov dsp, nos ; decd nos ; sub tos, nos ; mov @nos, tos
stick	: rla tos ; mov dsp, nos ; decd nos ; sub tos, nos ; drop ; mov tos, @nos ; drop
sp@!	: mov dsp, nos ; mov tos, dsp ; mov nos, tos
rp@!	: mov sp, nos ; mov tos, sp ; mov nos, tos
>r	: push tos ; drop
r>	: dup ; pop tos
exec	: nop

var here .word mem
var state .word 1
