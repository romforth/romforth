#!/usr/bin/perl -w

# genbin : convert the Perl nested array "AST" into native code
#
# Copyright (c) 2025 Charles Suresh <romforth@proton.me>
# SPDX-License-Identifier: AGPL-3.0-only
# Please see the LICENSE file for the Affero GPL 3.0 license details

use strict;

my $f=shift or die "usage: $0 file";
my $x=require $f or die "parse failed";

sub lit {
	my ($l)=@_;
	my $o=$l->[1];
	print qq(\tdup ; dup\n);
	print qq(mov a, #$o\n);
}

my $jmp;

sub prim {
	my ($w)=@_;
	my $o=$w->[1];
	print "\t$o ; $w->[0]\n";
}
sub word {
	my ($w)=@_;
	my $o=$w->[1];
	if ($o eq 'j') { $jmp='j' ; return; }
	if ($o eq 'jz') { $jmp='jz' ; return; }
	if ($o eq 'jnz') { $jmp='jnz' ; return; }
	print "\t$o ; $w->[1]\n";
}

sub skip {
	my ($s)=@_;
	my $o=$s->[1];
	#print "$jmp $o\n";
	if ($jmp eq 'j') {
		print ".db 0x80, $o ; sjmp offset\n";
	} elsif ($jmp eq 'jz') {
		print "cpl a\n";
		print "mov r1, a\n";
		print "\tdrop ; drop\n";
		print ".db 0xB9, 0, $o ; cjne r1, #0, offset\n";
	} elsif ($jmp eq 'jnz') {
		print "nop\n"; # to keep the number of bytes the same as jz
		print "mov r1, a\n";
		print "\tdrop ; drop\n";
		print ".db 0xB9, 0, $o ; cjne r1, #0, offset\n";
	}
}

my $label="lbl000";

sub cond {
	my ($s)=@_;
	my $i=$s->[1];	# AST for the 'if' part
	my $e=$s->[2];	# AST for the 'else' part
	print "jz $label", "_then\n";
	print "\tdrop ; drop\n";
	my ($l,$c)=($label++, "_then");
	my $si = walk($i);	# expand out the 'if' part of the AST
	if (defined $e and @$e != 0) {
		print "sjmp ", $l, "_endif\n";
		print $l, $c, ":\n";
		print "\tdrop ; drop\n";
		$c='_endif';
		my $se = walk($e);	# expand out the 'else' part of the AST
		print $l, $c, ":\n";
	} else {
		print ".db 0x80, 2 ; sjmp +2\n";
		print $l, $c, ":\n";
		print "\tdrop ; drop\n";
	}
}

my $fhash={
	'word' => \&word,
	'lit' => \&lit,
	'skip' => \&skip,
	'cond' => \&cond,
	'prim' => \&prim,
};

my $fn;

sub walk { # walk through the Abstract Syntax Tree
	my ($t)=@_;
	for my $i (@$t) {
		$fn=$fhash->{$i->[0]} or die "unmapped fn ".$i->[0];
		$fn->($i);
	}
}
#use Data::Dumper; print Dumper($x);
walk($x);
